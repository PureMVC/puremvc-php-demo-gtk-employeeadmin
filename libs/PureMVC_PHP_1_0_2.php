<?php
/**
 * PureMVC Port to PHP originally translated by Asbjørn Sloth Tønnesen
 *
 * @author Omar Gonzalez :: omar@almerblank.com
 * @author Hasan Otuome :: hasan@almerblank.com 
 * 
 * Created on Sep 24, 2008
 * PureMVC - Copyright(c) 2006-2008 Futurescale, Inc., Some rights reserved.
 * Your reuse is governed by the Creative Commons Attribution 3.0 Unported License
 */
interface ICommand { public function execute( INotification $notification ); } 
interface IController { public function registerCommand( $notificationName, $commandClassRef ); public function executeCommand( INotification $notification ); public function removeCommand( $notificationName ); } 
interface IFacade { public function registerProxy( IProxy $proxy ); public function retrieveProxy( $proxyName ); public function hasProxy( $proxyName ); public function removeProxy( $proxyName ); public function registerCommand( $noteName, $commandClassRef ); public function notifyObservers( INotification $note ); public function registerMediator( IMediator $mediator ); public function retrieveMediator( $mediatorName ); public function hasMediator( $mediatorName ); public function removeMediator( $mediatorName ); public function sendNotification( $notificationName, $body=null, $type=null ); } 
interface IMediator { public function getMediatorName(); public function getViewComponent(); public function setViewComponent( $viewComponent ); public function listNotificationInterests(); public function handleNotification( INotification $notification ); public function onRegister(); public function onRemove(); } 
interface IModel { public function registerProxy( IProxy $proxy ); public function retrieveProxy( $proxyName ); public function removeProxy( $proxyName ); public function hasProxy( $proxyName ); } 
interface INotification { public function getName(); public function setBody( $body ); public function getBody(); public function setType( $type ); public function getType(); public function toString(); } 
interface INotifier { public function sendNotification( $notificationName, $body=null, $type=null ); } 
interface IObserver { public function setNotifyMethod( $notifyMethod ); public function setNotifyContext( $notifyContext ); public function notifyObserver( INotification $notification ); public function compareNotifyContext( $object ); } 
interface IProxy { public function getProxyName(); public function getData(); public function setData( $data ); public function onRegister(); public function onRemove(); } 
interface IView { public function registerObserver ( $noteName, IObserver $observer ); public function notifyObservers( INotification $note ); public function registerMediator( IMediator $mediator ); public function retrieveMediator( $mediatorName ); public function removeMediator( $mediatorName ); public function hasMediator( $mediatorName ); } 
class Notification implements INotification { private $name; private $type; private $body; public function Notification( $name, $body=null, $type=null ) { $this->name = $name; $this->body = $body; $this->type = $type; } public function getName() { return $this->name; } public function setBody( $body) { $this->body = $body; } public function getBody() { return $this->body; } public function setType( $type ) { $this->type = $type; } public function getType() { return $this->type; } public function toString() { $msg = "Notification Name: " . $this->getName(); $msg .= "\nBody:"; $msg .= ($this->body == null) ? "null" : $this->body; $msg .= "\nType:"; $msg .= ($this->type == null) ? "null" : $this->type; return $msg; } } 
class Notifier implements INotifier { protected $facade; public function sendNotification( $notificationName, $body=null, $type=null ) { $this->facade->sendNotification( $notificationName, $body, $type ); } public function __construct() { $this->facade = Facade::getInstance(); } } 
class Observer implements IObserver { private $notify; private $context; public function __construct( $notifyMethod, $notifyContext ) { $this->setNotifyMethod( $notifyMethod ); $this->setNotifyContext( $notifyContext ); } public function setNotifyMethod( $notifyMethod ) { $this->notify = $notifyMethod; } public function setNotifyContext( $notifyContext ) { $this->context = $notifyContext; } private function getNotifyMethod() { return $this->notify; } private function getNotifyContext() { return $this->context; } public function notifyObserver( INotification $notification ) { $context = $this->getNotifyContext(); $method = $this->getNotifyMethod(); $classReflector = new ReflectionClass( $context ); $className = $classReflector->getName(); $funcReflector = new ReflectionMethod( $className, $method ); $funcReflector->invokeArgs( $context, array($notification) ); } public function compareNotifyContext( $object ) { return $object === $this->context; } } 
class Controller implements IController { protected $view; protected $commandMap; protected static $instance; private function __construct() { $this->commandMap = array(); $this->initializeController(); } protected function initializeController() { $this->view = View::getInstance(); } public static function getInstance() { if ( Controller::$instance == null ) Controller::$instance = new Controller(); return Controller::$instance; } public function executeCommand( INotification $note ) { $commandClassName = $this->commandMap[ $note->getName() ]; $commandClassReflector = new ReflectionClass( $commandClassName ); $commandClassRef = $commandClassReflector->newInstance(); $commandClassRef->execute( $note ); } public function registerCommand( $notificationName, $commandClassRef ) { $this->commandMap[$notificationName] = $commandClassRef; $this->view->registerObserver( $notificationName, new Observer("executeCommand", $this) ); } public function hasCommand( $notificationName ) { return $this->commandMap[ $notificationName ] != null; } public function removeCommand( $notificationName ) { $this->commandMap[ $notificationName ] = null; } } 
class Facade implements IFacade { protected $controller; protected $model; protected $view; protected static $instance; protected function __construct() { $this->initializeFacade(); } protected function initializeFacade() { $this->initializeModel(); $this->initializeController(); $this->initializeView(); } static public function getInstance() { if (Facade::$instance == null) Facade::$instance = new Facade(); return Facade::$instance; } protected function initializeController() { if ($this->controller != null) return; $this->controller = Controller::getInstance(); } protected function initializeModel() { if ($this->model != null) return; $this->model = Model::getInstance(); } protected function initializeView() { if ( $this->view != null ) return; $this->view = View::getInstance(); } public function notifyObservers( INotification $notification ) { if ($this->view != null) $this->view->notifyObservers( $notification ); } public function registerCommand( $notificationName, $commandClassRef ) { $this->controller->registerCommand( $notificationName, $commandClassRef ); } public function removeCommand( $notificationName ) { $this->controller->removeCommand( $notificationName ); } public function hasCommand( $notificationName ) { return $this->controller->hasCommand( $notificationName ); } public function registerProxy( IProxy $proxy ) { $this->model->registerProxy( $proxy ); } public function retrieveProxy( $proxyName ) { return $this->model->retrieveProxy( $proxyName ); } public function hasProxy( $proxyName ) { return $this->model->hasProxy( $proxyName ); } public function removeProxy( $proxyName ) { if ($this->model != null) $proxy = $this->model->removeProxy( $proxyName ); return $proxy; } public function registerMediator( IMediator $mediator ) { if ($this->view != null) $this->view->registerMediator( $mediator ); } public function retrieveMediator( $mediatorName ) { return $this->view->retrieveMediator( $mediatorName ); } public function hasMediator( $mediatorName ) { return $this->view->hasMediator( $mediatorName ); } public function removeMediator( $mediatorName ) { if ($this->view != null) $mediator = $this->view->removeMediator( $mediatorName ); return $mediator; } public function sendNotification( $notificationName, $body=null, $type=null ) { $this->notifyObservers( new Notification( $notificationName, $body, $type ) ); } } 
class MacroCommand extends Notifier implements ICommand, INotifier { private $subCommands; public function __construct() { parent::__construct(); $this->subCommands = array(); $this->initializeMacroCommand(); } protected function initializeMacroCommand() { } protected function addSubCommand( $commandClassRef ) { array_push( $this->subCommands, $commandClassRef ); } public final function execute( INotification $notification ) { while (count($this->subCommands) > 0) { $commandClassName = array_shift( $this->subCommands ); $commandClassReflector = new ReflectionClass( $commandClassName ); $commandClassRef = $commandClassReflector->newInstance(); $commandClassRef->execute( $notification ); } } } 
class Mediator extends Notifier implements IMediator, INotifier { protected $mediatorName; protected $viewComponent; protected $facade; const NAME = 'Mediator'; public function __construct( $mediatorName, $viewComponent=null ) { $this->facade = Facade::getInstance(); $this->viewComponent = $viewComponent; $this->mediatorName = ($mediatorName != null) ? $mediatorName : self::NAME; } public function getMediatorName() { return $this->mediatorName; } public function getViewComponent() { return $this->viewComponent; } public function setViewComponent( $component ) { $this->viewComponent = $component; } public function listNotificationInterests() { return array(); } public function handleNotification( INotification $notification ) { } public function onRegister() { return; } public function onRemove() { return; } } 
class Model implements IModel { protected $proxyMap; protected static $instance; private function __construct() { $this->proxyMap = array(); $this->initializeModel(); } protected function initializeModel() { } static public function getInstance() { if (Model::$instance == null) Model::$instance = new Model(); return Model::$instance; } public function registerProxy( IProxy $proxy ) { $this->proxyMap[ $proxy->getProxyName() ] = $proxy; $proxy->onRegister(); } public function retrieveProxy( $proxyName ) { return $this->proxyMap[ $proxyName ]; } public function removeProxy( $proxyName ) { $proxy = $this->proxyMap[ $proxyName ]; unset($this->proxyMap[ $proxyName ]); $proxy->onRemove(); return $proxy; } public function hasProxy( $proxyName ) { return $this->proxyMap[ $proxyName ] != null; } } 
class Proxy extends Notifier implements IProxy, INotifier { protected $proxyName; protected $data; protected $facade; const NAME = 'Proxy'; public function __construct( $proxyName=null, $data=null ) { $this->facade = Facade::getInstance(); $this->proxyName = ($proxyName != null) ? $proxyName : self::NAME; if ($data != null) $this->setData($data); } public function getProxyName() { return $this->proxyName; } public function setData( $data ) { $this->data = $data; } public function getData() { return $this->data; } public function onRegister() { return; } public function onRemove() { return; } } 
class SimpleCommand extends Notifier implements ICommand, INotifier { protected $facade; public function __construct() { $this->facade = Facade::getInstance(); } public function execute( INotification $notification ) { } } 
class View implements IView { protected $mediatorMap; protected $observerMap; protected static $instance; private function __construct() { $this->mediatorMap = array(); $this->observerMap = array(); $this->initializeView(); } protected function initializeView() { } public static function getInstance() { if ( View::$instance == null ) View::$instance = new View(); return View::$instance; } public function registerObserver( $notificationName, IObserver $observer ) { if (isset($this->observerMap[ $notificationName ]) && $this->observerMap[ $notificationName ] != null) { array_push( $this->observerMap[ $notificationName ], $observer ); } else { $this->observerMap[ $notificationName ] = array( $observer ); } } public function notifyObservers( INotification $notification ) { if ($this->observerMap[ $notification->getName() ] != null) { $observers = $this->observerMap[ $notification->getName() ]; foreach ($observers as $observer) { $observer->notifyObserver( $notification ); } } } public function registerMediator( IMediator $mediator ) { $this->mediatorMap[ $mediator->getMediatorName() ] = $mediator; $interests = $mediator->listNotificationInterests(); if (count($interests) > 0) { $observer = new Observer( "handleNotification", $mediator ); foreach ($interests as $interest) { $this->registerObserver( $interest, $observer ); } } $mediator->onRegister(); } public function retrieveMediator( $mediatorName ) { return $this->mediatorMap[ $mediatorName ]; } public function hasMediator( $mediatorName ) { return $this->mediatorMap[ $mediatorName ] != null; } public function removeMediator( $mediatorName ) { foreach ( $this->observerMap as &$observers ) { foreach ( $observers as &$observer ) { if ($observer->compareNotifyContext( $this->retrieveMediator( $mediatorName ) ) == true) { unset($observer); if ( count($observers) == 0 ) { unset($observers); break; } } } } $mediator = $this->mediatorMap[ $mediatorName ]; unset($this->mediatorMap[ $mediatorName ]); if ($mediator != null) { $mediator->onRemove(); } return $mediator; } } 
